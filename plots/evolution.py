import numpy as np
import os
from scipy.interpolate import interp1d
from scipy.integrate import simps
from scipy import stats
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use("Agg")
matplotlib.rcParams['mathtext.fontset'] = 'custom'
matplotlib.rcParams['mathtext.rm'] = 'Bitstream Vera Sans'
matplotlib.rcParams['mathtext.it'] = 'Bitstream Vera Sans:italic'
matplotlib.rcParams['mathtext.bf'] = 'Bitstream Vera Sans:bold'
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'

evolution_input = input()

'''
the evolution input is a string consists of all input parameters, usually this is automatically set in the run.sh file
generated by jobs_evo.py.

an example evolution input is: 15_2.0e-04_4.0e+00_3.0_3.0_0.200, which means (run_name)_(He_star_mass_solar)_(BH_mass_solar)_(initial_orbit_days)
if evolution input ends with "r", then the script reads the parameters from existing summary file
'''

l = 2
m = 2
G = 6.67e-8
c = 2.99792458e10
M_sun = 1.9892e33
R_sun = 6.955e10

run_name = "%s_%s_%s"%(evolution_input.split("_")[0], evolution_input.split("_")[1], evolution_input.split("_")[2])
M_He = float(evolution_input.split("_")[3])
M_bh = float(evolution_input.split("_")[4])
P_orb = float(evolution_input.split("_")[5])

if evolution_input[-1] == "r":
    restart = True
else:
    restart = False

mesa_run_dir = '/panfs/ds09/hopkins/linhao/Wolf_Rayet/MESA/%s/LOGS/'%run_name
gyre_run_dir = '/panfs/ds09/hopkins/linhao/Wolf_Rayet/GYRE/%s/'%run_name
evo_dir = '/panfs/ds09/hopkins/linhao/Wolf_Rayet/evolution/%s_%d_%.1f_%.2f'%(run_name,M_He,M_bh,P_orb)

M_p = M_bh*M_sun

print('companion mass: %.1f M_sun'%M_bh)


if not os.path.exists(evo_dir):
    os.mkdir(evo_dir)
    os.mkdir(evo_dir+'/frames')

def read_data(MESA_profile_dir, GYRE_output_dir):
    '''
    profile number, star mass (cgs), radius (cgs), age (Myr), kappa (dimensionless moment), center He fraction, core mass (cgs), core radius (cgs)
    '''
    profile_num = []
    star_mass = []
    star_radius = []
    star_age = []
    star_moment = []
    star_center_He = []
    core_mass = []
    core_radius = []
    rho_c = []

    i = min([int(s[7:]) for s in os.listdir(GYRE_output_dir) if s.startswith('profile')])
    file_end_flag = 0

    while file_end_flag == 0:
        try:
            mesa_lines = open(MESA_profile_dir+'profile%d.data'%i).readlines()
            profile_num.append(i)
            star_age = np.append(star_age, float(mesa_lines[2].split()[4])*1e-6)
            # moment
            m_R = np.array([float(line.split()[1]) for line in mesa_lines[6:]])*M_sun
            log_R = np.array([float(line.split()[2]) for line in mesa_lines[6:]])
            log_rho = np.array([float(line.split()[4]) for line in mesa_lines[6:]])
            rho = np.power(10,log_rho)
            R = np.power(10, log_R)*R_sun
            star_moment = np.append(star_moment, np.abs(simps(R**2, m_R)))
            star_mass = np.append(star_mass, m_R[0])
            star_radius = np.append(star_radius, R[0])
            star_center_He = np.append(star_center_He, float(mesa_lines[-1].split()[7]))
            # core mass & radius, density at core
            BV_freq = np.array([float(line.split()[9]) for line in mesa_lines[6:]])
            core_mass = np.append(core_mass, m_R[BV_freq>0][-1])
            core_radius = np.append(core_radius, R[BV_freq>0][-1])
            rho_c = np.append(rho_c, rho[BV_freq>0][-1])
        except IOError:
            file_end_flag = 1
        finally:
            i = i + 1
    
    star_kappa = star_moment/(star_mass*star_radius**2) 

    return star_mass, star_radius, star_age, star_kappa, profile_num, star_center_He, core_mass, core_radius, rho_c

def mode_list_no_strange_modes(gyre_run_dir, profile):
    modes_list = []
    omegas = []
    n_pgs = []
    for d in os.listdir(gyre_run_dir+'profile%d'%profile):
        if d.startswith('mode_nad'):
            mode_lines = open(gyre_run_dir+'profile%d/%s'%(profile,d)).readlines()
            omega = float(mode_lines[3].split()[2])
            if omega>1/120:
                omegas = np.append(omegas, omega)
                n_pgs.append(int(mode_lines[3].split()[1]))
                modes_list.append(d)
    slope, intercept, _, _, _ = stats.linregress(1/omegas, np.array(n_pgs))
    not_strange_modes = list((n_pgs<slope/omegas+intercept+7)*(n_pgs>slope/omegas+intercept-7))
    return list(np.array(modes_list)[not_strange_modes])


star_mass, star_radius, star_age, star_kappa, profile_num, star_He, star_core_mass, star_core_radius, star_rho_c = read_data(mesa_run_dir, gyre_run_dir)
star_mass_dot = np.gradient(star_mass, star_age)/(365.25e6*86400) # to cgs
f_mass = interp1d(star_age, star_mass)
f_mass_dot = interp1d(star_age, star_mass_dot)
f_radius = interp1d(star_age, star_radius)
f_kappa = interp1d(star_age, star_kappa)
f_He = interp1d(star_age, star_He)
f_core_mass = interp1d(star_age, star_core_mass)
f_core_radius = interp1d(star_age, star_core_radius)
f_rho_c = interp1d(star_age, star_rho_c)

# initial conditions

if restart == False:
    age = np.array([star_age[0]+0.02*(star_age[-1]-star_age[0])])
    Omega_s = np.array([0.00])
    Omega_orb = np.array([2*np.pi/(P_orb*86400)])
    index = 0 # plot index
else:
    summary = open(evo_dir+'/summary.txt', 'r').readlines()
    age = np.array([float(line.split()[0]) for line in summary[2:]])
    Omega_s = np.array([float(line.split()[1]) for line in summary[2:]])
    Omega_orb = np.array([float(line.split()[2]) for line in summary[2:]])
    summary_new = open(evo_dir+'/summary.txt', 'w+')
    for line in summary[:-1]:
        summary_new.write(line)
    summary_new.close()
    existing_frames_indices = [int(pic[4:-4]) for pic in os.listdir(evo_dir+'/frames') if pic.startswith("step")]
    index = max(existing_frames_indices) # plot index

print('integrating: %.2e to %.2e Myr'%(age[-1], star_age[-1]))

summary = open(evo_dir+'/summary.txt', 'a')
if restart == False:
    summary.write('age\tOmega_s\tOmega_orb\tsemi_major_axis\tmass\tmass_dot\tradius\tkappa\tcentral_He_fraction\tcore_mass\tcore_radius\trho_c\n\n')
summary.close()

while (age[-1]<star_age[-1]) and (Omega_s[-1] < Omega_orb[-1]):
    print('age: %.5f Myr, f_spin = %.2e, f_orb = %.2e'%(age[-1], Omega_s[-1]*86400/(2*np.pi), Omega_orb[-1]*86400/(2*np.pi)))
    mass = f_mass(age[-1])
    mass_dot = f_mass_dot(age[-1])
    radius = f_radius(age[-1])
    kappa = f_kappa(age[-1])
    He = f_He(age[-1])
    core_mass = f_core_mass(age[-1])
    core_radius = f_core_radius(age[-1])
    rho_c_ave = core_mass/(4*np.pi*core_radius**3/3)
    rho_c = f_rho_c(age[-1])
    beta2 = 1
    a = np.power(G*(mass+M_p)/Omega_orb[-1]**2, 1/3)

    summary = open(evo_dir+'/summary.txt', 'a')
    summary.write('%.4e\t%.4e\t%.4e\t%.4e\t%.8e\t%.4e\t%.8e\t%.4e\t%.4e\t%.8e\t%.8e\t%.4e\n'%(age[-1], Omega_s[-1], Omega_orb[-1], a, mass, 
    mass_dot, radius, kappa, He, core_mass, core_radius, rho_c))
    summary.close()

    omega_f = m*(Omega_orb[-1] - Omega_s[-1])
    
    profile_after = int(np.array(profile_num)[age[-1]<star_age][0])
    profile_before = profile_after-1
    
    age_after = star_age[profile_after-profile_num[0]]
    age_before = star_age[profile_before-profile_num[0]]
    
    fac_before = (age_after - age[-1])/(age_after-age_before)
    fac_after = (age[-1] - age_before)/(age_after-age_before)
    
    # for every n_pg in profile_before, search in profile_after, and interpolate properties
    
    eul_phi_amp = []
    omega = []
    gamma = []
    delta_log_omega = []
    mode_dir = []

    mode_nad_list_before = mode_list_no_strange_modes(gyre_run_dir, profile_before)
    mode_nad_list_after = mode_list_no_strange_modes(gyre_run_dir, profile_after)

    for d in mode_nad_list_before:
        mode_lines_before = open(gyre_run_dir+'profile%d/'%profile_before+d).readlines()
        n_pg_before = int(float(mode_lines_before[3].split()[1]))
        for d2 in mode_nad_list_after:
            mode_lines_after = open(gyre_run_dir+'profile%d/'%profile_after+d2).readlines()
            if int(float(mode_lines_after[3].split()[1])) == n_pg_before:
                mode_nad_list_after.remove(d2)
                eul_phi_amp_before = np.sqrt(float(mode_lines_before[-1].split()[5])**2+float(mode_lines_before[-1].split()[6])**2)
                eul_phi_amp_after = np.sqrt(float(mode_lines_after[-1].split()[5])**2+float(mode_lines_after[-1].split()[6])**2)
                omega_before = float(mode_lines_before[3].split()[2])
                omega_after = float(mode_lines_after[3].split()[2])
                gamma_before = float(mode_lines_before[3].split()[3])
                gamma_after = float(mode_lines_after[3].split()[3])
                eul_phi_amp = np.append(eul_phi_amp, fac_before*eul_phi_amp_before+fac_after*eul_phi_amp_after)
                omega = np.append(omega, fac_before*omega_before+fac_after*omega_after)
                gamma = np.append(gamma, fac_before*gamma_before+fac_after*gamma_after)
                delta_log_omega = np.append(delta_log_omega, np.log(omega_after)-np.log(omega_before))
                mode_dir.append(d)
                break
    omega_cgs = omega*np.sqrt(G*mass/radius**3)
    gamma_cgs = gamma*np.sqrt(G*mass/radius**3)
    t_alpha = np.abs((age_after-age_before)*365.25e6*86400/delta_log_omega)
    
    Q_alpha = np.abs((2*l+1)*eul_phi_amp/(np.sqrt(4*np.pi)*omega**2))

    # dot_J
    dot_E_alpha = m*omega_cgs*Omega_orb[-1]*gamma_cgs*mass*radius**2*Q_alpha**2*omega_f**2*(M_p/mass)**2*(radius/a)**6/((omega_f-omega_cgs)**2+gamma_cgs**2)
    dot_E_orb = np.sum(dot_E_alpha)
    arg_dom = np.argmax(np.abs(dot_E_alpha))
    dot_J = dot_E_orb/Omega_orb[-1]
    mu = mass*M_p/(mass+M_p)
    orbit_radius = M_p*a/(M_p+mass)

    # dot+J_GW

    dot_J_GW = (32./5.)*(G**(7/2)*mass**2*M_p**2*np.sqrt(mass+M_p))/(c**5*a**(7/2))

    Omega_orb_dot = (dot_J - dot_J_GW + mass_dot*Omega_orb[-1]*orbit_radius**2)/(mu*a**2)
    Omega_s_dot = (-1*dot_J + mass_dot*radius**2*np.abs(Omega_s[-1]))/(kappa*mass*radius**2)
    
    # timestep control (dt i cgs)
    closest_arg = np.argmin((omega_f-omega_cgs)**2)
    resonance_width = np.abs(gamma_cgs[closest_arg])
    # threshold 1: one step not changing omega_f by 0.1 of resonance width
    omega_f_dot = m*(Omega_orb_dot - Omega_s_dot)
    dt1 = 0.1*resonance_width/np.abs(omega_f_dot)
    # threshold 2: one step not changing mode frequency significantly
    dt2 = 0.1*t_alpha[np.argmin((omega_f-omega_cgs)**2)]
    # threshold 3: one step not changing the total evolution time by 1/50
    dt3 = (star_age[-1]-age[0])*365.25e6*86400/50
    # threshold 4: one step does not cross the resonance locations when not close to resonance
    dt4 = 0.1*np.abs(omega_f-omega_cgs[closest_arg])/np.abs(omega_f_dot)
    # threshold 5: one step by mass-loss AM loss does not 2% of the spin (in case spin reaches zero in a few timesteps)
    dt5 = 0.02*np.abs(Omega_s[-1])/np.abs(mass_dot*radius**2*Omega_s[-1]/(kappa*mass*radius**2))
    # if close to resonance, choose min(dt1, dt2)
    if np.abs(omega_f-omega_cgs[closest_arg])<resonance_width:
        dt = min(dt1, dt2, dt5)
    else:
        dt = min(dt2, dt3, dt4, dt5)

    # stuff to plot
    
    resonance_Omega_orb = omega_cgs/m + Omega_s[-1]
    resonance_period = 2*np.pi/(resonance_Omega_orb*86400)
    period_array = []
    
    sort = np.argsort(resonance_period)
    resonance_period = resonance_period[sort]
    
    for i in range(np.size(resonance_period)-1):
        period_array = np.append(period_array, np.linspace(resonance_period[i],resonance_period[i+1], 200))
    
    dot_J_resonance = []
    dot_J_array = np.zeros((np.size(omega_cgs), np.size(period_array)))
    dot_J_array_tot = np.zeros(np.size(period_array))
    dot_J_array_Zahn = np.zeros(np.size(period_array))
    
    for period in resonance_period:
        omega_orb_other = 2*np.pi/(period*86400)
        omega_f_other = m*(omega_orb_other - Omega_s[-1])
        a_other = np.power(G*(mass+M_p)/omega_orb_other**2, 1/3)
        dot_E_alpha_other = m*omega_cgs*omega_orb_other*gamma_cgs*mass*radius**2*Q_alpha**2*omega_f_other**2*(M_p/mass)**2*(radius/a)**6/((omega_f_other-omega_cgs)**2+gamma_cgs**2)
        dot_E_orb_other = np.sum(dot_E_alpha_other)
        dot_J_resonance = np.append(dot_J_resonance, dot_E_orb_other/omega_orb_other)

    for i in range(np.size(period_array)):
        period = period_array[i]
        omega_orb_other = 2*np.pi/(period*86400)
        omega_f_other = m*(omega_orb_other - Omega_s[-1])
        a_other = np.power(G*(mass+M_p)/omega_orb_other**2, 1/3)
        dot_E_alpha_other = m*omega_cgs*omega_orb_other*gamma_cgs*mass*radius**2*Q_alpha**2*omega_f_other**2*(M_p/mass)**2*(radius/a)**6/((omega_f_other-omega_cgs)**2+gamma_cgs**2)
        dot_E_orb_other = np.sum(dot_E_alpha_other)
        dot_J_array[:,i] = dot_E_alpha_other/omega_orb_other
        dot_J_array_tot[i] = dot_E_orb_other/omega_orb_other
        # Zahn 1975 results (from Kushnir paper)
        sc = 2*np.abs(omega_orb_other-Omega_s[-1])*np.sqrt(core_radius**3/(G*core_mass))
        dot_J_array_Zahn[i] = beta2*(G*M_p**2/core_radius)*(core_radius/a_other)**6*sc**(8/3)*(rho_c/rho_c_ave)*(1-rho_c/rho_c_ave)**2
        
    # resolve the dominating mode
    
    mode_lines_dom = open(gyre_run_dir+'profile%d/%s'%(profile_before, mode_dir[arg_dom])).readlines()
    core_radius_profile = star_core_radius[profile_before-profile_num[0]]
    
    # radius and normalized displacements
    r = np.array([float(line.split()[0]) for line in mode_lines_dom[7:]])
    re_xi_r = np.array([float(line.split()[1]) for line in mode_lines_dom[7:]])
    im_xi_r = np.array([float(line.split()[2]) for line in mode_lines_dom[7:]])
    re_xi_r_diff_abs = np.abs(np.gradient(r**2*re_xi_r, r))/r**2
    im_xi_r_diff_abs = np.abs(np.gradient(r**2*im_xi_r, r))/r**2
    xi_r_diff_abs = np.sqrt(re_xi_r_diff_abs**2+im_xi_r_diff_abs**2)

    off_amp =  0.5*(Q_alpha[arg_dom]*omega_f/np.sqrt((omega_f-omega_cgs[arg_dom])**2+gamma_cgs[arg_dom]**2))*(M_p/mass)*(radius**3/a**3)
    
    fig, [ax, ax2] = plt.subplots(1,2)
    
    ss_to_dMyr = 86400*86400*365.25e6
    ax.semilogy(period_array, np.abs(dot_J_array_tot*ss_to_dMyr/(kappa*mass*radius**2)), linewidth = 3, color = 'k')
    ax.semilogy(period_array, np.abs(dot_J_array_Zahn*ss_to_dMyr/(kappa*mass*radius**2)), linewidth = 5, color = 'orange', label = 'Zahn')
    for i in range(np.size(omega_cgs)):
        if i == arg_dom:
            ax.semilogy(period_array, np.abs(dot_J_array[i,:]*ss_to_dMyr/(kappa*mass*radius**2)), linewidth = 1, color = 'r')
        else:
            ax.semilogy(period_array, np.abs(dot_J_array[i,:]*ss_to_dMyr/(kappa*mass*radius**2)), linewidth = 1, color = 'b')
    ax.semilogy((2*np.pi)/(Omega_orb[-1]*86400), np.abs(dot_J*ss_to_dMyr/(kappa*mass*radius**2)), 'r.',  markersize = 25)
    ax.set_xlabel(r'Orbital Period [day]', fontsize = 60)
    ax.set_ylabel(r'$\dot{\Omega}_\mathrm{spin}$ [d$^{-1}$ Myr$^{-1}$]', fontsize = 60)
    ax.tick_params(labelsize=50, pad = 10)
    ax.tick_params('both', length=20, width=2, which='major',direction = 'in')
    ax.tick_params('both', length=10, width=1, which='minor', direction = 'in')
    ax.set_ylim((1e-2,1e15))
    ax.set_xlim((P_orb-0.075,P_orb+0.2))
    
    ax.annotate(r'Orbital Period: %.2f days'%(2*np.pi/(Omega_orb[-1]*86400)), (P_orb+0.08, 1e13), fontsize = 35, ha='left', va='center')
    ax.annotate(r'Central He: %.1f%%'%(He*100), (P_orb+0.08, 1e11), fontsize = 35, ha='left', va='center')
    
    ax2.loglog(r, off_amp*xi_r_diff_abs, 'r', zorder = -1)

    ax2.annotate(r'Non-linear Wave Breaking', (6e-2, 10), fontsize = 40, ha='center', va='center')
    ax2.annotate(r'Omega: %.3e'%omega_cgs[arg_dom], (0.2, 0.1), fontsize = 35, ha='left', va='center')
    ax2.annotate(r'Gamma: %.3e'%gamma_cgs[arg_dom], (0.2, 0.02), fontsize = 35, ha='left', va='center')
    ax2.fill_between([1e-5,1],[1,1],[100,100],color = 'grey', alpha = 0.1, zorder = 3)
    ax2.fill_between([1e-5,core_radius_profile/star_radius[profile_before-profile_num[0]]],[1e-11,1e-11],[1,1],color = 'red', alpha = 0.1, zorder = 3)

    ax2.set_ylabel(r'$|d\xi_r/dr|$', fontsize = 60)
    ax2.set_xlabel(r'Radius [$R_*$]', fontsize = 60)
    ax2.tick_params(labelsize=45, pad = 10)
    ax2.minorticks_on()
    ax2.set_yticks([1e-8,1e-6,1e-4,1e-2,1,1e2])
    ax2.tick_params('both', length=20, width=2, which='major',direction = 'in')
    ax2.tick_params('both', length=10, width=1, which='minor', direction = 'in')
    ax2.set_xlim((1e-2,1))
    ax2.set_ylim((3e-10,1e2))
    
    fig.set_size_inches(40,18)
    if index == 0:
        ax.annotate(r'Spin Period: inf days', (P_orb+0.08, 1e12), fontsize = 35, ha='left', va='center')
    else:
        ax.annotate(r'Spin Period: %.2f days'%(2*np.pi/(Omega_s[-1]*86400)), (P_orb+0.08, 1e12), fontsize = 35, ha='left', va='center')
    plt.savefig(evo_dir+'/frames/step%04d.png'%index)
    plt.close()
    index = index + 1

    age = np.append(age, age[-1] + dt/(365.25e6*86400)) # dt covert to Myr
    Omega_s = np.append(Omega_s, Omega_s[-1] + dt*Omega_s_dot)
    Omega_orb = np.append(Omega_orb, Omega_orb[-1] + dt*Omega_orb_dot)

fig, ax = plt.subplots()

ax.plot(age, Omega_s*86400/(2*np.pi), linewidth = 5, label = 'spin')
ax.plot(age, Omega_orb*86400/(2*np.pi), linewidth = 5, label = 'orbit')

ax2 = ax.twinx()

ax2.plot(star_age, star_He, 'k--', linewidth = 2)

ax.set_xlabel(r'stellar age [Myr]', fontsize = 60)
ax.set_ylabel(r'frequency [d$^{-1}$]', fontsize = 60)
ax.tick_params(labelsize=50, pad = 10)
ax.tick_params('both', length=20, width=2, which='major',direction = 'in')
ax.tick_params('both', length=10, width=1, which='minor', direction = 'in')
ax.set_ylim((0,6))
ax2.set_ylabel(r'central He fraction', fontsize = 60)
ax2.tick_params(labelsize=50, pad = 10)
ax2.tick_params('both', length=20, width=2, which='major',direction = 'in')
ax2.tick_params('both', length=10, width=1, which='minor', direction = 'in')
ax2.set_ylim((0,1))
ax.set_xlim((age[0],age[-1]))
ax.legend(fontsize =35, frameon=False, loc = 'lower right')
fig.set_size_inches(20,15)
plt.savefig(evo_dir+'/evolution.png')
plt.close()

print('finished')

print('making movie...')
os.system('ffmpeg -framerate 25 -pattern_type glob -i \'%s/frames/step*.png\' -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -c:v libx264 -pix_fmt yuv420p \'%s/evolution.mp4\''%(evo_dir,evo_dir))